<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out\DebugInFlash\LPC8xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out\DebugInFlash\LPC8xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Wed Nov 23 00:33:13 2016
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; gprs_init &rArr; gprs_connect_tcp &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[40]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_OVR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_OVR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_OVR_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[19]">ADC_SEQA_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1a]">ADC_SEQB_IRQHanlder</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1b]">ADC_THCMP_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[16]">BOD_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[14]">CMP_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1d]">DMA_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[11]">I2C0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[10]">I2C1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[1f]">I2C3_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[13]">MRT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[20]">PIN_INT0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[21]">PIN_INT1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[22]">PIN_INT2_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[23]">PIN_INT3_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[24]">PIN_INT4_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[25]">PIN_INT5_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[26]">PIN_INT6_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[27]">PIN_INT7_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[12]">SCT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[b]">SPI0_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[c]">SPI1_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_lpc8xx.o(.text) referenced from startup_lpc82x.o(.text)
 <LI><a href="#[d]">UART0_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[f]">UART2_IRQHandler</a> from main.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[18]">WKT_IRQHandler</a> from startup_lpc82x.o(.text) referenced from startup_lpc82x.o(RESET)
 <LI><a href="#[2a]">__main</a> from __main.o(!!!main) referenced from startup_lpc82x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[83]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[84]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[85]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[86]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[87]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[88]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[89]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[90]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[92]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[93]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[94]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[95]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[96]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[97]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[99]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[32]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; gprs_init &rArr; gprs_connect_tcp &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[35]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[37]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OVR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OVR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC_SEQA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_SEQB_IRQHanlder</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_THCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WKT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc82x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_iccardwhitelist
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
</UL>

<P><STRONG><a name="[a3]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[3b]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_thread
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_white_list
</UL>

<P><STRONG><a name="[a4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_iccardwhitelist
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[34]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[aa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ab]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_lpc8xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, system_lpc8xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, system_lpc8xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>myDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_reset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_thread
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_sound
</UL>

<P><STRONG><a name="[7d]"></a>WKTInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>WKTdelayMs</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>GPIOInit</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>UART0RecvEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[ae]"></a>UART0RecvDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>UART0SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>

<P><STRONG><a name="[5e]"></a>UART0SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>UART1SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
</UL>

<P><STRONG><a name="[5f]"></a>UART1SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>UART1RecvEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>UART2SendEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
</UL>

<P><STRONG><a name="[60]"></a>UART2SendDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>UART0Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RecvEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>UART1Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>UART2Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>gpio_ctrl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_reset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_door
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_wakeup
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_sleep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_off
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led0_off
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_on
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led0_on
</UL>

<P><STRONG><a name="[4b]"></a>led0_on</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led0_on
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[4d]"></a>led1_on</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led1_on
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[4e]"></a>led0_off</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led0_off
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>led1_off</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = led1_off
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[50]"></a>iccard_module_sleep</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iccard_module_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
</UL>

<P><STRONG><a name="[51]"></a>uart2_sendbuf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_sound
</UL>

<P><STRONG><a name="[53]"></a>wakeup_sound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
</UL>

<P><STRONG><a name="[55]"></a>playback_voice</STRONG> (Thumb, 66 bytes, Stack size 120 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_sound
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cardsound
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_door
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
</UL>

<P><STRONG><a name="[57]"></a>open_door</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = open_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_sleep
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[58]"></a>iccard_module_wakeup</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iccard_module_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_user_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_door
</UL>

<P><STRONG><a name="[59]"></a>close_door</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = close_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_wakeup
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_thread
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[5a]"></a>uart0_sendbuf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart0_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_iccardwhitelist
</UL>

<P><STRONG><a name="[5c]"></a>uart1_sendbuf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[d]"></a>UART0_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CheckSum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[61]"></a>send_cmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_sendbuf
</UL>

<P><STRONG><a name="[6b]"></a>isvalid_packet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[63]"></a>parse_packet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_packet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[64]"></a>cardsound</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
</UL>

<P><STRONG><a name="[65]"></a>report_iccardwhitelist</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = report_iccardwhitelist &rArr; uart0_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[67]"></a>is_white_card</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_white_card
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_whitelist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_white_list
</UL>

<P><STRONG><a name="[66]"></a>del_white_list</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = del_white_list &rArr; is_white_card
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_white_card
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[68]"></a>add_whitelist</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_whitelist &rArr; is_white_card
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_white_card
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
</UL>

<P><STRONG><a name="[69]"></a>handle_cmd</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = handle_cmd &rArr; close_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_whitelist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_white_list
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_iccardwhitelist
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_door
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_off
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_on
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
</UL>

<P><STRONG><a name="[6a]"></a>uart0_thread</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uart0_thread &rArr; handle_cmd &rArr; close_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_packet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_packet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led0_on
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>get_whitelist_from_flash</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>add_whitelist_to_flash</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>delete_whitelist_from_flash</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>is_right_iccard_data</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
</UL>

<P><STRONG><a name="[6c]"></a>handle_iccard</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = handle_iccard &rArr; open_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_right_iccard_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_white_card
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_thread
</UL>

<P><STRONG><a name="[6e]"></a>uart1_thread</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = uart1_thread &rArr; handle_iccard &rArr; open_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_iccard
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>uart2_thread</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>key_thread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>door_thread</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = door_thread &rArr; close_door &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_door
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>gprs_reg</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gprs_reg &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[72]"></a>check_gprs_cmd_ack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_gprs_cmd_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
</UL>

<P><STRONG><a name="[71]"></a>gprs_close_echo</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gprs_close_echo &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[73]"></a>gprs_att</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gprs_att &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[74]"></a>gprs_act</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gprs_act &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[75]"></a>gprs_connect_tcp</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gprs_connect_tcp &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[76]"></a>gprs_trs_config</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gprs_trs_config &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[77]"></a>gprs_trs_open</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gprs_trs_open &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gprs_cmd_ack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_sendbuf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[78]"></a>gprs_user_data</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gprs_user_data &rArr; iccard_module_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reconnect_server
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
</UL>

<P><STRONG><a name="[b4]"></a>gprs_close_tcp</STRONG> (Thumb, 14 bytes, Stack size 20 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>gprs_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gprs_init &rArr; gprs_connect_tcp &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_user_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_att
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_close_echo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>gprs_reconnect_server</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_user_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_trs_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_connect_tcp
</UL>

<P><STRONG><a name="[7b]"></a>iccard_module_reset</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ctrl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; gprs_init &rArr; gprs_connect_tcp &rArr; playback_voice &rArr; wakeup_sound &rArr; uart2_sendbuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_thread
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thread
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_thread
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_thread
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_voice
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_sound
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iccard_module_sleep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_off
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led0_off
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKTdelayMs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKTInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myDelay
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[48]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
